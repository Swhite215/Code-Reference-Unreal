Title: Unreeal Engine 4 Game Development in 24 Hours
Authors: Aram Cookson, Ryan DowlingSoka, and Clinton Crumpler

Summarization of Content

Chapter 1 - Introducing Unreal Engine 4
    a. Installing Unreal
        - Epice Games Launcher -> Library -> Add Version -> Selet Version -> Install
    b. Creating Your First Project
        - Project Browser -> Blueprint/C++ -> Template -> Target Hardware -> Graphics Quality -> With Starter Content -> Location -> Name -> Create Project
    c. Learning the Interface
        - Layout Interface is Modifiable
        - Menu Bar - File, Edit, Window, and Help
        - Modes Panel
            - Place Mode - For placing actors in a scene
            - Paint Mode - For painting vertex color data on Static Mesh Actors
            - Landscape Mode - For Editing Landscape Terrain Actors
            - Foliage Mode - For painting instanced Foliage Actors in a Level
            - Geometry Editing Mode - For Editing BSP Brush Actors on the vertex edge face level
        - World Outlinier Panel - Displays all the actors within the current level in a hierarchical view
        - Detail Panel - displays all the editable properties for the selected actor in the Viewport
        - Content Browser Panel - primary area for managing assets in a project
        - Viewport Panel - windows into the world you create. Use to move around the current level
            - Viewport Types - Perspective and Orthographic
    d. View Modes and Visualizers
        - Lit - Shows the final result of a scene with materials and lighting applied
        - Unlit - Removes all lighting from the scene, showing base color from assigned materials
        - Wireframe - Shows all the polygon edges of Actors in the scene
        - Detail Lighting - Displays a neautral material across the entire scene, using the normal maps of the assigned materials
        - Lighting Only - Displays neutral materials that is affected only by lighting without normal maps data
    e. Playing a Level

Chapter 2 - Understanding the Gameplay Framework
    a. Available Resources
        - Epic Games Launcher Community and Learn Sections
        - Play-In Editor - collection of options that allowqs you to playtest a level without having to compile or package content beforehand
        - Project Folder Structure
            - Config - this folder contains default .ini files that store default Editor and project settings and preferences
            - Content - This folder stores all the assets in the project that are either imported or created directly in the Editor
            - Intermediate - This folder stores the project's working .ini setting and preference files, along with a CachedAssetRegistry.bin file
            - Saved - This folder contains Editor auto save and backup files, a Collection folder for assets organized into collections in the content browser, project Config settings for target platforms, Editor log files, and the project thumbnail .png image file that you see in the Launcher
    b. Asset References and the Reference Viewer
        - Reference Viewer - shows the dependencies for an asset
    c. Gameplay Framework - collection of C++ or Blueprint classes that manages trhe rules of the Game, player input and avatars, cameras, and player HUDs in every project
        - GameMode Class - used to set the rules of the Game and store all the other classes that are needed to define the Game's core functionality
            - DefaultPawn, HUD, PlayerController, Spectator, ReplaySpectator, PlayerState, GameState
        - Controller Classes - controls a pawn in the game
            - PlayerController - manages inputs from the player and directs a pawn in the game by possessing it.
            - PawnClass - takes input from the PlayerController class and uses it to direct the physical representation of the player in the game (Pawn, Character, and Vehicle)
        - HUD Class - used to draw 2D interface content to the player's screen and create in-Game heads-up display

Chapter 3 - Coordinates, Transforms, Units, and Organization
    a. Understanding Cartesian Coordinates
        - Z (Up and Down), Y (Left to Right), X (Front to Back)
    b. Working with Transforms
        - Transformation Tools
            - Move, Scale, Rotate
        - Interactive and Manual Transforms
            - Interactive - using Move, Scale, or Rotate transformation tools
            - Manual - using specific values or numeric setting in the Details Panel for an Actor
        - World and Local Transforms
            - World - use the whole world, understanding that up is up, down i sdown, forward is forward, and so on.
            - Local - references an Actor as the rule setter
    c. Assessing Units and Measurements
        - 1 Unreal Unit UU is equal to 1 real world centimeter, char = 180uu, door = 220uu, etc.
        - Grid Units - Snapping to Grid
    d. Organizing a Scene
        - World Outliner - hierarchical view of actors in a scene
        - Folders - organization tool
        - Grouping - turning a selection of Actors into a single placed Actor
        - Layers
        - Attaching - attaching Actors to each other to create parent-child relationships

Chapter 4 - Working with Static Mesh Actors
    a. Static Mesh Assets - store the pivot point, vertices, edges, and polygons that define the visual look of a model, as well as LODs
    b. Static Mesh Editor - allows you to edit, modify, and set base properties for Static Mesh assets stored in the Content Browser
    c. Viewing UV Layouts
        - UV Channel 0 - UV Channels
        - UV Channel 1 - Lightmap Data - used for storing light and shadow information on the surface of a mesh
    d. Collision Hulls - simple primitive shape that surrounds a mesh and is used to identify collision events
        - Collision Event - occurs when two Actor collision hulls hit, touch, or overlap with each other
        - You can: view and edit collision hulls
        - Convex Decomposition - auto-generate collision hulls for more complicated models
        - Per-Poly Collision - most accurate collision you can have, also the most computationally intensive
    e. Static Mesh Actors - placed instances of a Static Mesh asset in a level
        - Mobility Settings
            - Static - tells the light engine that lightning needs to be precalculated
            - Movable - tells the light engine to calculate lightning during runtime
        - You can: change the mesh reference, replace the material and edit collision responses on a Static Mesh Actor
            - Collision Enabled, Response Flags, Object Type

Chapter 5 - Applying Lighting and Rendering
    a. Learning Light Terminology
        - Direct Lighting - refers top light that falls on the surface of an Actor, without any interference from other Actors
        - Indirect or Bounced Lighting - refers to light that has been reflected off the surface of another Actor in the scene
        - Static Lighting - refers to lighting for objects and lights that do not move
        - Dynamic Lighting - refers to lights and objects that may move at runtime
        - Shadows - created when the engine takes snapshots of the silhouette of a mesh from the light's point of view
    b. Understanding Light Types
        - Point Lights - work much like a real world lightbulb, emitting light equally in all directions from a single point in space
        - Spot Lights - emits light from a single point in a cone shape toward a specific direction
        - Sky Light - captures the distant parts of a level, everything further than SkyDistanceThreshold, and appliesd light to it
        - Direction Light - simulates light that is being emitted from a source that is infinitely far away
    c. Using Light Properties
        - Intensity - brightness of light, in lumens
        - Light Color - color of the light
        - Attenuation Radius - maximum distance the light will reach
        - Cast Shadows - determines whether objects affected by the light cast shadows
        - Inside Cone Angle - sets the angle in degrees of a Spot Light's bright area
        - Outside Cone Angle - sets the angle in degrees of a Spot Light's falloff area
        - Temperature - allows you to set the light based on Kelvin color temperature scale
    d. Building Lighting
        - Lightmass - tool for building lighting (Window -> World Settings -> Lightmass)
        - Build - Build -> Lighting Quality -> Preview || Lighting Quality -> High
        - Swarm Agent - manages communication between the editor and Lightmass. Displays the build progress. Can connect to external computing power for over the network rendering
        - Mobility
            - Static - lights that cannot be changed or moved in any way at runtime
            - Movable - lights case completely dynamic light and shadows, and they can change position, rotation, color, brightness, falloff, radius and more
            - Stationary - lights that cannot move, however their brightness and color can be chaged at runtime

Chapter 6 - Using Materials
    a. Understanding Materials
        - Material/Shader - combination of textures, vectors, and other mathematical calculations that work in tandem to create surface decsriptions and properties for assetst in UE4
    b. Physically Based Rendering - use material parameters to allow assets to form their own lighting and shadow information
    c. Material Input Types
        - Base Color/Albedo - core color decsription of a surface in a material minus all shadow and lighting detail
        - Metalness - used to describe whether a material is metallic
        - Roughness - represents the roughness and the history of the surface of the material being created
        - Normal - normal map textures or three-vector values, decsribe the direction in which light should react with a surface
    d. Creating Textures
        - Powers of 2 - 4096, 2048, 1024, 512, 256, 128, 64, 32, 165, 8, 4, 2
        - Mipping or Mip Mapping - UE4 reduces texture size by continuously halving it as the player gets farther from the asset
        - Texture File Type - .tga, .psd, .tiff, .bmp, .float, .pcx, .png, .jpg, .dds, .
        - Importing Textures
    e. Making a Material
        - Content Browser -> Create Basic Asset/Material
        - Material Editor Panels
            - Viewport Panel - real time preview of the material
            - Details Panel - where you can change overall material properties
            - Graph Panel - visual editing
            - Palette Panel - houses all the special nodes and math functions for creating specific effects within a material
        - Inputs and Outputs
        - Value Nodes - numbers that can create values or colors depending on the number of values used
            - Constant Node - single number or value
            - Constant3Vector Node - vector of three numbers, each representing a RGB value
        - Instances - key to reusing materials multiple times, change node to parameter for flexibility

Chapter 7 - Using Audio System Elements
    a. Introducing Audio Basics
    b. Using Sound Actors
    c. Controlling Sounds with Audio Volumes

Chapter 8 - Creating Landscapes and Foliage
    a. Working with Landscapes
    b. Sculpting Shapes and Volumes
    c. Using Foliage

Chapter 9 - World Building
    a. Building Worlds
    b. World Building Process

Chapter 10 - Crafting Effects with Particle Systems
    a. Understanding Particles and Data Types
    b. Working with Cascade
    c. Using COmmon Modules
    d. Setting Up Materials for Particles
    e. Triggering Particle Systems

Chapter 11 - Using Skeletal Mesh Actors
    a. Defining Skeletal Meshes
    b. Importing Skeletal Meshes
    c. Learning Persona
    d. Using Skeletal Mesh Actors

Chapter 12 - Matinee and Cinematics
    a. Matinee Actors
    b. Matinee Editor
    c. Curve Editor
    d. Working with Other Tracks
    e. Working with Cameras in Matinee

Chapter 13 - Learning to Work with Physics
    a. Using Physics in UE4
    b. Simulating Physics
    c. Using Physical Materials
    d. Working with Constraints
    e. Using Force Actors

Chapter 14 - Introducing Blueprint Visual Scripting System
    a. Visual Scripting Basics
    b. Understanding the Blueprint Editor
    c. Fundamental Concepts in Scripting

Chapter 15 - Working with Level Blueprints
    a. Actor Collision Settings
    b. Assigning Actors to Events
    c. Assinging Actors to Reference Variables

Chapter 16 - Working with Blueprint Classes
    a. Using Blueprint Classes
    b. The Blueprint Editor Interface
    c. Working with Components
    d. Working with the Timeline
    e. Scripting a Pulsating Light

Chapter 17 - Using Editable Variables and the Construction Script
    a. Setting Up
    b. Making Editable Variables
    c. Using the Construction Script

Chapter 18 - Making Key Input Events and Spawning Actors
    a. Why Spawning is Important
    b. Creating a Blueprint Class to Spawn
    c. Setting up the Spawner Blueprint
    d. Spawning an Actor from a Class

Chapter 19 - Making an Action Encounter
    a. Project Game Modes
    b. Knowing Characters' Abilities
    c. Using Blueprint Classes
    d. Actor and Component Tags

Chapter 20 - Creating an Arcade Shooter: Input Systems and Pawns
    a. Identifying Requirments with a Design Summary
    b. Creating a Game Project
    c. Creating a Custom Game Mode
    d. Creating a Custom Pawn and Player Controller
    e. Controlling a Pawn's Movement
    f. Setting Up a Fixed Camera

Chapter 21 - Creating an Arcade Shooter: Obstacles and Pickups
    a. Creating an Arcade Shooter: Obstacles and Pickups
    b. Making Your Obstacle Move
    c. Damaging the Pawn
    d. Restarting the Game on Death
    e. Creating a Health Pickup
    f. Creating an Actor Spawner
    g. Cleaning Up Old Obstacles

Chapter 22 - Working with UMG
    a. Creating a Widget Blueprint
    b. Navigating the UMG Interface
    c. Creating a Start Menu
    d. Sample Menu System

Chapter 23 - Making an Executable
    a. Cooking Content
    b. Packaging A Project for Windows
    c. Resources for Android and iOS Packaging
    d. Accessing Advanced Packaging Settings

Chapter 24 - Working with Mobile
    a. Developing for Mobile Devices
    b. Using Touch
    c. Using a Device's Motion Data